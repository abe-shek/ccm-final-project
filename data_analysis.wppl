var run_answerer_analysis = function (load_human = false) {
    // don't condition on 'practice' trials for human data analysis
    if (load_human) {
        var f = function (v) {
            var state = JSON.parse(v['gridState']);
            return (_.toInteger(v['trialNum']) > 6
                && (state['safe'].length + state['unsafe'].length) > 0);
        };
    }

    var answererData = filter(f, qa.readCSV('../data/input/answerer_synthetic.csv'));


    globalStore.analysis = [];
    Infer({
        method: 'enumerate', model: function () {
            var alpha_a = config.alpha_a;
            var alpha_q = config.alpha_q;
            var beta = config.beta;
            var model = SpatialModel(alpha_q, alpha_a, beta);

            var answerer = model.answerer;

            var answererType = flip() ? 'explicit' : 'pragmatic';
            globalStore.score = 0;

            mapData({data: answererData}, function (response) {
                var rawState = JSON.parse(response['gridState']);
                var state = {
                    'safe': sort(rawState['safe']),
                    'unsafe': sort(rawState['unsafe'])
                };
                var world = JSON.parse(response['underlyingWorld']);

                var question = load_human ? 'is_' + response['cellAskedAbout'] + '_safe?' : response['cellAskedAbout'];
                var trueAnswer = load_human ? map(function (v) {
                        return v + '_' + world[v]
                    },
                    JSON.parse(response['answer'])) : response['answer'];
                var prediction = answerer(answererType, question, world, state);
                var score = prediction.score(trueAnswer);
                globalStore.score += score;
                factor(_.isFinite(score) ? score : -10);
            });
            globalStore.analysis = globalStore.analysis.concat({
                answererType,
                alpha_q,
                alpha_a,
                beta,
                likelihood: globalStore.score
            });
        }
    });

    qa.writeCSV(globalStore.analysis, './data/dataAnalysisOut_answerer.csv')
};

var run_questioner_analysis = function (load_human = false) {
    if (load_human) {
        // don't condition on 1st 6 'practice' trials while loading human data
        var f = function (v) {
            var state = JSON.parse(v['gridState']);
            return (_.toInteger(v['trialNum']) > 6
                && (state['safe'].length + state['unsafe'].length) > 0);
        };
    }

    var questionerData = filter(f, qa.readCSV('../data/questioner_synthetic.csv'));

    globalStore.analysis = [];
    Infer({
        method: 'enumerate', model: function () {
            var alpha_a = config.alpha_a;
            var alpha_q = config.alpha_q;
            var beta = config.beta;

            var model = SpatialModel(alpha_q, alpha_a, beta);
            var questioner = model.questioner;
            var questionerType = flip() ? 'explicit' : 'pragmatic';
            globalStore.score = 0;

            mapData({data: questionerData}, function (response) {
                var rawState = JSON.parse(response['gridState']);
                var state = {
                    'safe': sort(rawState['safe']),
                    'unsafe': sort(rawState['unsafe'])
                };
                var goal = response['goal'] === 'columns' ? ['1', '2', '3'] : ['A', 'B', 'C'];
                var prediction = Infer({method: 'enumerate'}, function () {
                    var guess = flip(.1);
                    return guess ?
                        sample(Categorical({
                            vs: ['is_A1_safe?',
                                'is_A2_safe?',
                                'is_A3_safe?',
                                'is_B1_safe?',
                                'is_B2_safe?',
                                'is_B3_safe?',
                                'is_C1_safe?',
                                'is_C2_safe?',
                                'is_C3_safe?'
                            ]
                        })) : sample(questioner(questionerType, goal, state));
                });
                let question = load_human ? 'is_' + response['question'] + '_safe?' : response['question'];
                var score = prediction.score(question);
                globalStore.score += score;
                factor(_.isFinite(score) ? score : -10);
            });

            globalStore.analysis = globalStore.analysis.concat({
                questionerType,
                alpha_q,
                alpha_a,
                beta,
                likelihood: globalStore.score
            });
        }
    });
    qa.writeCSV(globalStore.analysis, './data/dataAnalysisOut_questioner.csv')
};

var config = {
    'alpha_q': argv.alpha_q,
    'alpha_a': argv.alpha_a,
    'beta': argv.beta_a
};

if (argv.run_answer) {
    run_answerer_analysis()
} else if (argv.run_question) {
    run_questioner_analysis()
} else {
    console.log("Choose either 'questioner' or 'answerer' analysis.")
}
